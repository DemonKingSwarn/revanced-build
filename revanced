#!/bin/sh

# Utility Function to print messages with color
info() {
    printf "\033[1;35m=> \033[1;${2:-36}m%s\033[0m\n" "$1"
}

# Function to download the APK
download_apk() {
    local app="$1"
    local version="$2"

    check_app_version "$app" "$version"

    info "[ $app ][ v$version ] Fetching Download page.."
    final_page=$(fetch_download_page "$app" "$version")
    [ -z "$final_page" ] && info "[ $app ][ v$version ] Unable to Fetch Download Page.." "31" && exit 1

    info "[ $app ][ v$version ] Fetching Download URL.."
    download_url=$(fetch_download_url "$final_page")
    [ -z "$download_url" ] && info "[ $app ][ v$version ] Unable to Fetch Download URL.." "31" && exit 1

    info "[ $app ][ v$version ] Downloading App.."
    download_app "$download_url" "$app" "$version"
}

# Function to check if the app and version exist
check_app_version() {
    local app="$1"
    local version="$2"

    [ -z "$app" ] && info "[ $app ][ v$version ] Version doesn't Exist!" "31" && exit 1
}

# Function to fetch the download page
fetch_download_page() {
    local app="$1"
    local version="$2"
    curl -s "${apk_provider_url}${version}" --tlsv1.3 -A "$agent" | sed -nE 's|.*href="(.*\/download\/[^"]*)".*|\1|p' | sed 's|&amp;|\&|g'
}

# Function to fetch the download URL
fetch_download_url() {
    local final_page="$1"
    curl -s "${apk_provider_url}${final_page}" --tlsv1.3 -A "$agent" | sed -nE 's|.*href="(.*download.php[^"]*)".*|\1|p' | sed 's|&amp;|\&|g'
}

# Function to download the APK
download_app() {
    local download_url="$1"
    local app="$2"
    local version="$3"
    aria2c -x16 -s16 "${apk_provider_url}${download_url}" --user-agent="$agent" -d "$tmp_dir" -o "$app-$version.apk" --allow-overwrite=true --check-certificate=false --download-result=hide --summary-interval=0 && info "[ $app ][ v$version ] App Downloaded.." && return 0
    info "[ $app ][ v$version ] Unable to Download.." "31" && exit 1
}

# Function to download the keystore file
download_keystore() {
    if [ -f "$HOME/.secrets" ]; then
        . "$HOME/.secrets"
        load_revanced_creds
        keystore="--keystore $tmp_dir/$RV_KEYSTORE"
        if [ ! -f "$tmp_dir/$RV_KEYSTORE" ]; then
            curl_keystore
        fi
    else
        return 0
    fi
}

# Function to download the keystore file using curl
curl_keystore() {
    curl -s "$RV_KEYSTORE_URL" -o "$tmp_dir/$RV_KEYSTORE"
    info "Downloaded Keystore file in $tmp_dir" "32"
}

# Function to download the necessary files
download_revanced_files() {
    local revanced_cli_url="$(curl -s "https://api.github.com/repos/revanced/revanced-cli/releases/latest" -L -A "$agent" | sed -nE "s|.*browser_download_url\": \"([^\"]*.jar)\"|\1\n\tout=$rv_cli|p")"
    local revanced_patches_url="$(curl -s "https://api.github.com/repos/revanced/revanced-patches/releases/latest" -L -A "$agent" | sed -nE "s|.*browser_download_url\": \"([^\"]*.jar)\"|\1\n\tout=$rv_patch|p")"
    local revanced_integrations_url="$(curl -s "https://api.github.com/repos/revanced/revanced-integrations/releases/latest" -L -A "$agent" | sed -nE "s|.*browser_download_url\": \"([^\"]*.apk)\"|\1\n\tout=$rv_inte|p")"

    printf "%s\n%s\n%s" "$revanced_cli_url" "$revanced_patches_url" "$revanced_integrations_url" | aria2c -j3 -x16 -s16 -i - --check-certificate=false --download-result=hide --summary-interval=0 --allow-overwrite=true -d "$tmp_dir" && info "Downloaded revanced-cli, revanced-patches, revanced-integrations at $tmp_dir"
}


# Main script

tmp_dir="/tmp/revanced"
agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
apk_provider_url="https://www.apkmirror.com"
date=$(date +%F)
rv_cli="cli-$date.jar"
rv_patch="patches-$date.jar"
rv_inte="integrations-$date.apk"
keystore=""

# Check if the directory exists
[ -d "$tmp_dir" ] || mkdir "$tmp_dir"

# Check if the necessary files are already downloaded
if [ -f "$tmp_dir/$rv_cli.aria2" ] && [ -f "$tmp_dir/$rv_patch.aria2" ] && [ -f "$tmp_dir/$rv_inte.aria2" ] && [ -f "$tmp_dir/$rv_cli" ] && [ -f "$tmp_dir/$rv_patch" ] && [ -f "$tmp_dir/$rv_inte" ]; then
    info "revanced-cli, revanced-patches, revanced-integrations already downloaded" "32"
else
    rm -f "$tmp_dir"/*.aria2
    info "Downloading revanced-cli, revanced-patches, revanced-integrations.."
    download_revanced_files
fi



download_keystore

# Choose your app
[ -z "$1" ] && app=$(printf "youtube\nyoutube-music" | fzf --prompt="Select Application:" --layout=reverse --height=8 --border) || app=$1

[ -z "$app" ] && exit 0

# Set variables according to the selected app
case $app in
    youtube)
        arch="universal"
        [ -z "$2" ] && version=$(curl -s "https://api.revanced.app/v2/patches/latest" | sed -nE 's|.*youtube","versions":\[[0-9\.",]*,"([^\}]*)"\].*|\1|p') || version=$2
        exclude_patch_list="always-autorepeat,hide-captions-button,custom-player-overlay-opacity,hide-seekbar,hide-timestamp,hide-video-action-buttons,player-flyout-menu,remove-player-controls-background,spoof-app-version"
        out="yt-revanced-$version.apk"
        ;;
    youtube-music)
        arch="arm64-v8a"
        [ -z "$2" ] && version="6.10.53" || version=$2
        exclude_patch_list=""
        out="yt-music-revanced-$version.apk"
        ;;
    *)
        info "Wrong Package Name, please pass either 'youtube' or 'youtube-music'" "31"
        exit 1
        ;;
esac

if [ -f "$tmp_dir/$app-$version.apk" ] && [ ! -f "$tmp_dir/$app-$version.apk.aria2" ]; then
    info "Latest Recommended $app v$version already downloaded" "32"
else
    info "[ $app ][ v$version ] Fetching App.."
    download_apk "$(curl -s "$apk_provider_url/apk/google-inc/$app/$app-$version-release/" -A "$agent" --tlsv1.3 | tr -d '\n' | sed 's|svg class|\n|g' | sed -nE "s|.*$arch.*nodpi.*accent_color\" href=\"([^\"]*)\".*|\1|p")"
fi

info "Checking Patches for excluding.."
patch_list=$(java -jar "$tmp_dir/$rv_cli" list-patches "$tmp_dir/$rv_patch" --with-descriptions=false)

if [ -n "$exclude_patch_list" ]; then
    info "Excluding Patches.." "33"
    exclude_patches=""
    for i in $(printf "%s" "$exclude_patch_list" | tr ',' '\n'); do
        if printf "%s" "$patch_list" | grep -iq "$(printf '%s' "$i" | tr '-' ' ')"; then
            res="32m ✓"
        else
            res="31m "
            check=1
        fi
        printf "\033[2K\r\033[1;%s %s\n" "$res" "$i"
    done
else
    info "Nothing to Exclude.." "32"
fi

[ -n "$check" ] && info "Some of the patches are not Excluded, check all failed patches using:" "31" && info "java -jar '$tmp_dir/$rv_cli' list-patches '$tmp_dir/$rv_patch' --with-packages" "33" && exit 1
info "All listed Patches Excluded"

info "Patching $app-$version.apk.."

# Execute patching command
java -jar "$tmp_dir/$rv_cli" patch --patch-bundle "$tmp_dir/$rv_patch" --merge "$tmp_dir/$rv_inte" --out "$HOME/$out" $keystore --resource-cache "$tmp_dir/revanced-resource-cache" "$tmp_dir/$app-$version.apk" $exclude_patches
